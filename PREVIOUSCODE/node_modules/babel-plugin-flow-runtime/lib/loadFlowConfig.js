"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadFlowConfig;

var _flowConfigParser = _interopRequireDefault(require("flow-config-parser"));

var _util = require("./util");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function loadFlowConfig() {
  return _loadFlowConfig.apply(this, arguments);
}

function _loadFlowConfig() {
  _loadFlowConfig = _asyncToGenerator(function* () {
    var startDir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
    var dirname = startDir;

    while (dirname) {
      try {
        var filename = _path.default.join(dirname, '.flowconfig');

        var stat = yield _util.fs.statAsync(filename);

        if (stat.isFile()) {
          var content = _util.fs.readFileAsync(filename, 'utf8');

          return (0, _flowConfigParser.default)(content);
        }
      } catch (e) {// do nothing
      }

      var next = _path.default.dirname(dirname);

      if (next === dirname) {
        return false;
      } else {
        dirname = next;
      }
    }
  });
  return _loadFlowConfig.apply(this, arguments);
}