"use strict";

var _fixtures = _interopRequireDefault(require("./fixtures"));

var _testTransform = _interopRequireDefault(require("./testTransform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

describe('transform', function () {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var _step$value = _slicedToArray(_step.value, 2),
          name = _step$value[0],
          _step$value$ = _step$value[1],
          input = _step$value$.input,
          expected = _step$value$.expected,
          annotated = _step$value$.annotated,
          combined = _step$value$.combined,
          customRuntime = _step$value$.customRuntime,
          integration = _step$value$.integration;

      it("should transform ".concat(name), function () {
        (0, _testTransform.default)(input, {
          assert: true,
          annotate: false
        }, expected, integration);
      });

      if (annotated) {
        it("should transform ".concat(name, " with decorations"), function () {
          (0, _testTransform.default)(input, {
            assert: false,
            annotate: true,
            integration: integration
          }, annotated, integration);
        });
      }

      if (combined) {
        it("should transform ".concat(name, " with decorations and assertions"), function () {
          (0, _testTransform.default)(input, {
            assert: true,
            annotate: true,
            integration: integration
          }, combined, integration);
        });
      }

      if (customRuntime) {
        it("should transform ".concat(name, " with custom runtime path"), function () {
          (0, _testTransform.default)(input, {
            libraryName: './custom-flow-runtime'
          }, customRuntime, integration);
        });
      }
    };

    for (var _iterator = _fixtures.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});