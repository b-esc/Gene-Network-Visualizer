"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fixturesDir = _path.default.join(__dirname, '__fixtures__');

var INCLUDE_PATTERN = process.env.TEST_FILTER ? new RegExp(process.env.TEST_FILTER) : null;

function findFiles(dirname, filenames) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _fs.default.readdirSync(dirname)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var filename = _step.value;

      var qualified = _path.default.join(dirname, filename);

      if (/\.js$/.test(filename)) {
        filenames.push(qualified.slice(fixturesDir.length + 1, -3));
      } else {
        var stat = _fs.default.statSync(qualified);

        if (stat.isDirectory()) {
          findFiles(qualified, filenames);
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return filenames;
}

function filterIncluded(filename) {
  if (INCLUDE_PATTERN) {
    return INCLUDE_PATTERN.test(filename);
  } else {
    return true;
  }
}

var files = findFiles(fixturesDir, []);
var fixtures = new Map(files.filter(filterIncluded).map(function (filename) {
  // Ignore
  return [filename, require("./__fixtures__/".concat(filename))];
}));
var _default = fixtures;
exports.default = _default;